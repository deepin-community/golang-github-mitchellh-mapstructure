Source: golang-github-mitchellh-mapstructure
Section: golang
Priority: optional
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: Kouhei Maeda <mkouhei@palmtb.net>,
           Anthony Fok <foka@debian.org>,
           Tim Potter <tpot@hpe.com>,
Rules-Requires-Root: no
Build-Depends: debhelper-compat (= 13),
               dh-sequence-golang,
               golang-any,
Testsuite: autopkgtest-pkg-go
Standards-Version: 4.6.1
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-mitchellh-mapstructure
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-mitchellh-mapstructure.git
Homepage: https://github.com/mitchellh/mapstructure
XS-Go-Import-Path: github.com/mitchellh/mapstructure

Package: golang-github-mitchellh-mapstructure-dev
Architecture: all
Multi-Arch: foreign
Depends: ${misc:Depends},
         ${shlibs:Depends},
Description: library for decoding generic map values into native Go structures
 mapstructure is a Go library for decoding generic map values to structures and
 vice versa, while providing helpful error handling.
 .
 This library is most useful when decoding values from some data stream (JSON,
 Gob, etc.) where you don't quite know the structure of the underlying data
 until you read a part of it. You can therefore read a map[string]interface{}
 and use this library to decode it into the proper underlying native Go
 structure.
 .
 Go offers fantastic standard libraries for decoding formats such as JSON. The
 standard method is to have a struct pre-created, and populate that struct from
 the bytes of the encoded format. This is great, but the problem is if you have
 configuration or an encoding that changes slightly depending on specific
 fields.
 .
 Perhaps we can't populate a specific structure without first reading the "type"
 field from the JSON. We could always do two passes over the decoding of the
 JSON (reading the "type" first, and the rest later). However, it is much
 simpler to just decode this into a map[string]interface{} structure, read the
 "type" key, then use something like this library to decode it into the proper
 structure.
